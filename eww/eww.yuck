;; =========================
;; eww.yuck – Hyprland bar
;; =========================

;; -------- Polls --------
(defpoll active_ws :interval "0.1s"
  "hyprctl -j activeworkspace | jq -r .id")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

;; Battery
(defpoll BATICON  :interval "1m" `scripts/battery --icon`)
(defpoll BATPERC  :interval "1m" `scripts/battery --perc`)
(defpoll BATLVL   :interval "1m" `scripts/battery --level`)  ;; 0–100
(defpoll BATSTATE :interval "1m" `scripts/battery --state`)  ;; Charging/Discharging/Full

;; Network
(defpoll NETICON   :interval "5s" `scripts/network --icon`)
(defpoll NETNAME   :interval "5s" `scripts/network --name`)
(defpoll NETSIGNAL :interval "5s" `scripts/network --signal`)
(defpoll NETSTATE  :interval "5s" `scripts/network --state`)
(defpoll NETTYPE   :interval "5s" `scripts/network --type`)

;; Optional toggle to hide/show network metric at runtime:
;;   eww update SHOW_NET=true|false
(defvar SHOW_NET true)

;; -------- Root Bar --------
(defwidget bar []
  (centerbox :class "bar" :orientation "h"
    (left-segment)            ; left side
    (box :hexpand true)       ; spacer
    (right-segment)))         ; right side

;; -------- Left segment --------
(defwidget left-segment []
  (box :class "segment left"
       :orientation "h"
       :halign "start" :valign "center"
       :space-evenly false :spacing 6
       (workspaces)))

;; -------- Right segment --------
;; Keep metrics + time together, aligned hard-right
(defwidget right-segment []
  (box :class "segment right"
       :orientation "h" :spacing 1 :valign "center" :halign "end"
       (metrics)
       (timebox)))

;; -------- Metrics (CPU/RAM/Battery/Network) --------
(defwidget metrics []
  (box :class "metrics" :orientation "h" :spacing 5
    ;; CPU
    (box :class "metric"
      (label :text " ${round(EWW_CPU.avg, 0)}%"))

    ;; RAM
    (box :class "metric"
      (label :text " ${round(EWW_RAM.used_mem_perc, 0)}%"))

    ;; Battery
    (box :class "metric"
      (label
        :class { BATSTATE == "Charging" ? "bat bat-charging"
               : BATLVL   < 15         ? "bat bat-crit"
               : BATLVL   < 50         ? "bat bat-warn"
                                       : "bat bat-ok" }
        :text "${BATICON} ${BATPERC}"))

    ;; Network — icon only, no label text width
    (box :class "metric network"
      (label
        :tooltip "${NETNAME} • ${NETTYPE} • ${NETSIGNAL}%"
        :class { NETSTATE == "connected"
               ? (NETTYPE == "wifi" || NETTYPE == "wireless")
                 ? (NETSIGNAL >= 60 ? "net net-good"
                                    : NETSIGNAL >= 30 ? "net net-fair"
                                                      : "net net-weak")
                 : "net net-wired"
               : "net net-disconnected" }
        :text "${NETICON}"))))

;; -------- Workspaces --------
(defwidget workspaces []
  (box :class "workspaces" :orientation "h" :spacing 6
    (button :class {active_ws == 1 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 1" 1)
    (button :class {active_ws == 2 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 2" 2)
    (button :class {active_ws == 3 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 3" 3)
    (button :class {active_ws == 4 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 4" 4)
    (button :class {active_ws == 5 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 5" 5)
    (button :class {active_ws == 6 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 6" 6)
    (button :class {active_ws == 7 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 7" 7)
    (button :class {active_ws == 8 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 8" 8)
    (button :class {active_ws == 9 ? "ws-btn active" : "ws-btn"} :onclick "hyprctl dispatch workspace 9" 9)))

;; -------- Time --------
(defwidget timebox []
  (box :class "timebox" :halign "end" time))

;; -------- Window --------
(defwindow bar
  :monitor 0
  :layer "top"
  :exclusive true
  :focusable false
  :geometry (geometry :x "0%" :y "0%"
                      :width "100%" :height "36px"
                      :anchor "top center")
  (bar))

(defwindow bar-hdmi
  :monitor 1
  :layer "top"
  :exclusive true
  :focusable false
  :geometry (geometry :x "0%" :y "0%"
                      :width "100%" :height "36px"
                      :anchor "top center")
  (bar))

